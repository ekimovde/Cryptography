[{"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\HomeBase.js":"1","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\richelieu.js":"2","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\index.js":"3","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\ScitulaBase.js":"4","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\index.js":"5","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Input\\Input.jsx":"6","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Button\\Button.jsx":"7","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Cardano\\Cardano.jsx":"8","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\caesar.js":"9","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\cardano.js":"10","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\gronsfeld.js":"11","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\GronsfeldBase.js":"12","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\validate.js":"13","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\VigenerBase.js":"14","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\vigener.js":"15","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\AtbashBase.js":"16","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Home\\Home.jsx":"17","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Form\\Form.jsx":"18","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\polybiusSquare.js":"19","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\PolybiusSquareBase.js":"20","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Scitula\\Scitula.jsx":"21","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Vigener\\Vigener.jsx":"22","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\CaesarBase.js":"23","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Navbar\\Navbar.jsx":"24","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Disk\\Disk.jsx":"25","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\disk.js":"26","D:\\Рабочий стол\\React\\Cryptography\\src\\App.js":"27","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\VernamBase.js":"28","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Vernam\\Vernam.jsx":"29","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\vernam.js":"30","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\playfair.js":"31","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\index.js":"32","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\scitula.js":"33","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Playfair\\Playfair.jsx":"34","D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\PlayfairBase.js":"35","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Atbash\\Atbash.jsx":"36","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Switch\\Switch.jsx":"37","D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Gronsfeld\\Gronsfeld.jsx":"38","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\atbash.js":"39"},{"size":3825,"mtime":1620544834439,"results":"40","hashOfConfig":"41"},{"size":3320,"mtime":1618236985398,"results":"42","hashOfConfig":"41"},{"size":732,"mtime":1620476681015,"results":"43","hashOfConfig":"41"},{"size":2864,"mtime":1616148088013,"results":"44","hashOfConfig":"41"},{"size":1068,"mtime":1620476754634,"results":"45","hashOfConfig":"41"},{"size":385,"mtime":1615216524779,"results":"46","hashOfConfig":"41"},{"size":372,"mtime":1615216524774,"results":"47","hashOfConfig":"41"},{"size":1385,"mtime":1616148467698,"results":"48","hashOfConfig":"41"},{"size":2409,"mtime":1615216524793,"results":"49","hashOfConfig":"41"},{"size":4955,"mtime":1616667598643,"results":"50","hashOfConfig":"41"},{"size":4918,"mtime":1618301109966,"results":"51","hashOfConfig":"41"},{"size":2743,"mtime":1618145064888,"results":"52","hashOfConfig":"41"},{"size":2603,"mtime":1618145060862,"results":"53","hashOfConfig":"41"},{"size":4234,"mtime":1618145809719,"results":"54","hashOfConfig":"41"},{"size":4752,"mtime":1618301204007,"results":"55","hashOfConfig":"41"},{"size":3070,"mtime":1615216524785,"results":"56","hashOfConfig":"41"},{"size":1737,"mtime":1615216524778,"results":"57","hashOfConfig":"41"},{"size":631,"mtime":1615216524777,"results":"58","hashOfConfig":"41"},{"size":4133,"mtime":1615216524794,"results":"59","hashOfConfig":"41"},{"size":4972,"mtime":1615216524787,"results":"60","hashOfConfig":"41"},{"size":1414,"mtime":1616148029160,"results":"61","hashOfConfig":"41"},{"size":1836,"mtime":1615612495733,"results":"62","hashOfConfig":"41"},{"size":2288,"mtime":1615216524786,"results":"63","hashOfConfig":"41"},{"size":404,"mtime":1615216524780,"results":"64","hashOfConfig":"41"},{"size":2422,"mtime":1616574445900,"results":"65","hashOfConfig":"41"},{"size":3158,"mtime":1616851061371,"results":"66","hashOfConfig":"41"},{"size":1250,"mtime":1620476784190,"results":"67","hashOfConfig":"41"},{"size":2704,"mtime":1620538642052,"results":"68","hashOfConfig":"41"},{"size":1577,"mtime":1620537799944,"results":"69","hashOfConfig":"41"},{"size":2756,"mtime":1620543430935,"results":"70","hashOfConfig":"41"},{"size":7077,"mtime":1620485921386,"results":"71","hashOfConfig":"41"},{"size":590,"mtime":1620476609678,"results":"72","hashOfConfig":"41"},{"size":1329,"mtime":1615216524794,"results":"73","hashOfConfig":"41"},{"size":1840,"mtime":1620476732284,"results":"74","hashOfConfig":"41"},{"size":4406,"mtime":1620477153083,"results":"75","hashOfConfig":"41"},{"size":1366,"mtime":1615612497231,"results":"76","hashOfConfig":"41"},{"size":939,"mtime":1615216524783,"results":"77","hashOfConfig":"41"},{"size":1589,"mtime":1615565028520,"results":"78","hashOfConfig":"41"},{"size":1525,"mtime":1615216524793,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ihjdbt",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\HomeBase.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\richelieu.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\index.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\ScitulaBase.js",[],["162","163"],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\index.js",[],["164","165"],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Input\\Input.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Button\\Button.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Cardano\\Cardano.jsx",[],["166","167"],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\caesar.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\cardano.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\gronsfeld.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\GronsfeldBase.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\validate.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\VigenerBase.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\vigener.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\AtbashBase.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Home\\Home.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Form\\Form.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\polybiusSquare.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\PolybiusSquareBase.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Scitula\\Scitula.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Vigener\\Vigener.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\CaesarBase.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Navbar\\Navbar.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Disk\\Disk.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\disk.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\App.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\VernamBase.js",["168"],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Vernam\\Vernam.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\vernam.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\playfair.js",["169","170","171","172"],"const arr_ru = \"абвгдеёжзийклмнопрстуфхцчшщъыьэюя\";\r\nconst arr_en = \"abcdefghijklmnopqrstuvwxyz\";\r\nconst arr_RU = \"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ\";\r\nconst arr_EN = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nvar alphabet = \"\";\r\nvar specialSymbol = \"\";\r\nvar size = null;\r\n\r\nconst playfair = {\r\n  keyCorrect: (key) => {\r\n    let newKey = key.split(\"\");\r\n    let objectsSymbol = {};\r\n\r\n    newKey.forEach((element) => {\r\n      let count = objectsSymbol[element] ? objectsSymbol[element] : 0;\r\n      objectsSymbol[element] = count + 1;\r\n    });\r\n\r\n    return Object.keys(objectsSymbol)\r\n      .map((item) => item)\r\n      .join(\"\");\r\n  },\r\n  alphabetCorrect: (key) => {\r\n    key = key.split(\"\");\r\n\r\n    key.forEach((symbol) => {\r\n      alphabet = alphabet.replace(symbol, \"\");\r\n    });\r\n\r\n    alphabet = key.join(\"\") + alphabet;\r\n    alphabet = alphabet.replaceAll(\"j\", \"\");\r\n\r\n    return alphabet;\r\n  },\r\n  createMatrix: (key) => {\r\n    alphabet = playfair.alphabetCorrect(key);\r\n\r\n    specialSymbol = size === 5 ? \"x\" : \"х\";\r\n\r\n    let matrix = [];\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      let arr = [];\r\n      for (let j = 0; j < size; j++) {\r\n        if (alphabet[index]) {\r\n          arr.push(alphabet[index]);\r\n        } else {\r\n          arr.push(\"*\");\r\n        }\r\n        index += 1;\r\n      }\r\n      matrix.push(arr);\r\n    }\r\n\r\n    return matrix;\r\n  },\r\n  textToBigrams: (text) => {\r\n    let check = true;\r\n\r\n    while (check) {\r\n      let bigrams = [];\r\n\r\n      for (let i = 0; i < text.length; i += 2) {\r\n        let newText = text.split(\"\");\r\n        bigrams.push(newText.splice(i, 2).join(\"\"));\r\n      }\r\n\r\n      let position = null;\r\n\r\n      try {\r\n        bigrams.forEach((bigram, index) => {\r\n          if (bigram.length === 2) {\r\n            if (bigram[0] === bigram[1]) {\r\n              throw index;\r\n            }\r\n          }\r\n        });\r\n      } catch (index) {\r\n        position = index * 2 + 1;\r\n      }\r\n\r\n      if (position) {\r\n        text = text.split(\"\");\r\n        text.splice(position, 0, specialSymbol);\r\n        text = text.join(\"\");\r\n      } else {\r\n        bigrams = bigrams.map((bigram) => {\r\n          if (bigram.length === 1) {\r\n            bigram += specialSymbol;\r\n          }\r\n          return bigram;\r\n        });\r\n        check = false;\r\n        return bigrams;\r\n      }\r\n    }\r\n\r\n    return text;\r\n  },\r\n  findBigramFromMatrix: (matrix, bigram) => {\r\n    bigram = bigram.split(\"\");\r\n\r\n    return bigram.map((element) => {\r\n      for (let i = 0; i < size; i++) {\r\n        for (let j = 0; j < size; j++) {\r\n          if (element === matrix[i][j]) {\r\n            return {\r\n              symbol: element,\r\n              i,\r\n              j,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n  buildStrEncrypt: (matrix, bigramInfo) => {\r\n    let str = \"\";\r\n\r\n    if (playfair.checkRow(bigramInfo)) {\r\n      str += playfair.trueRowEncrypt(matrix, bigramInfo);\r\n    }\r\n\r\n    if (playfair.checkColumn(bigramInfo)) {\r\n      str += playfair.trueColumnEncrypt(matrix, bigramInfo);\r\n    }\r\n\r\n    if (!playfair.checkRow(bigramInfo) && !playfair.checkColumn(bigramInfo)) {\r\n      str += playfair.falseRowAndColumn(matrix, bigramInfo);\r\n    }\r\n    return str;\r\n  },\r\n  checkRow: (bigramInfo) => {\r\n    if (bigramInfo[0].i === bigramInfo[1].i) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  checkColumn: (bigramInfo) => {\r\n    if (bigramInfo[0].j === bigramInfo[1].j) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  trueRowEncrypt: (matrix, bigramInfo) => {\r\n    let str = \"\";\r\n\r\n    bigramInfo.forEach((bigram) => {\r\n      let index = bigram.j < size - 1 ? bigram.j + 1 : 0;\r\n      str += matrix[bigram.i][index];\r\n    });\r\n\r\n    return str;\r\n  },\r\n  trueColumnEncrypt: (matrix, bigramInfo) => {\r\n    let str = \"\";\r\n\r\n    bigramInfo.forEach((bigram) => {\r\n      let index = bigram.i < size - 1 ? bigram.i + 1 : 0;\r\n      str += matrix[index][bigram.j];\r\n    });\r\n\r\n    return str;\r\n  },\r\n  falseRowAndColumn: (matrix, bigramInfo) => {\r\n    let str =\r\n      matrix[bigramInfo[0].i][bigramInfo[1].j] +\r\n      matrix[bigramInfo[1].i][bigramInfo[0].j];\r\n\r\n    return str;\r\n  },\r\n  encrypt: (matrix, bigrams) => {\r\n    let textEncrypt = \"\";\r\n\r\n    bigrams.forEach((bigram) => {\r\n      let bigramInfo = playfair.findBigramFromMatrix(matrix, bigram);\r\n      textEncrypt += playfair.buildStrEncrypt(matrix, bigramInfo);\r\n    });\r\n\r\n    return textEncrypt;\r\n  },\r\n  encoding: (text, key, lang) => {\r\n    text = text.toLowerCase().replaceAll(\" \", \"\");\r\n    text = text.toLowerCase().replaceAll(\"\\n\", \"\");\r\n    key = key.toLowerCase().replaceAll(\" \", \"\");\r\n    key = playfair.keyCorrect(key);\r\n\r\n    size = lang === \"Английский\" ? 5 : 6;\r\n    alphabet = size === 5 ? arr_en : arr_ru;\r\n\r\n    const matrix = playfair.createMatrix(key);\r\n    console.log(\"Матрица: \", matrix);\r\n\r\n    let bigrams = playfair.textToBigrams(text);\r\n    console.log(\"Массив биграм: \", bigrams);\r\n\r\n    let textEncrypt = playfair.encrypt(matrix, bigrams);\r\n    console.log(\"Зашифрованный текст: \", textEncrypt);\r\n\r\n    return textEncrypt;\r\n  },\r\n  decoding: (text, key, lang) => {\r\n    key = key.toLowerCase().replaceAll(\" \", \"\");\r\n    key = playfair.keyCorrect(key);\r\n\r\n    size = lang === \"Английский\" ? 5 : 6;\r\n    alphabet = size === 5 ? arr_en : arr_ru;\r\n\r\n    const matrix = playfair.createMatrix(key);\r\n    console.log(\"Матрица: \", matrix);\r\n\r\n    let bigrams = playfair.textToBigrams(text);\r\n    console.log(\"Массив биграм: \", bigrams);\r\n\r\n    let textDecrypt = playfair.decrypt(matrix, bigrams);\r\n    console.log(\"Расшифрованный текст: \", textDecrypt);\r\n\r\n    return textDecrypt;\r\n  },\r\n  decrypt: (matrix, bigrams) => {\r\n    let textDecrypt = \"\";\r\n\r\n    bigrams.forEach((bigram) => {\r\n      let bigramInfo = playfair.findBigramFromMatrix(matrix, bigram);\r\n      textDecrypt += playfair.buildStrDecrypt(matrix, bigramInfo);\r\n    });\r\n\r\n    return textDecrypt;\r\n  },\r\n  buildStrDecrypt: (matrix, bigramInfo) => {\r\n    let str = \"\";\r\n\r\n    if (playfair.checkRow(bigramInfo)) {\r\n      str += playfair.trueRowDecrypt(matrix, bigramInfo);\r\n    }\r\n\r\n    if (playfair.checkColumn(bigramInfo)) {\r\n      str += playfair.trueColumnDecrypt(matrix, bigramInfo);\r\n    }\r\n\r\n    if (!playfair.checkRow(bigramInfo) && !playfair.checkColumn(bigramInfo)) {\r\n      str += playfair.falseRowAndColumn(matrix, bigramInfo);\r\n    }\r\n    return str;\r\n  },\r\n  trueRowDecrypt: (matrix, bigramInfo) => {\r\n    let str = \"\";\r\n\r\n    bigramInfo.forEach((bigram) => {\r\n      let index = bigram.j > 0 ? bigram.j - 1 : size - 1;\r\n      str += matrix[bigram.i][index];\r\n    });\r\n\r\n    return str;\r\n  },\r\n  trueColumnDecrypt: (matrix, bigramInfo) => {\r\n    let str = \"\";\r\n\r\n    bigramInfo.forEach((bigram) => {\r\n      let index = bigram.i > 0 ? bigram.i - 1 : size - 1;\r\n      str += matrix[index][bigram.j];\r\n    });\r\n\r\n    return str;\r\n  },\r\n};\r\n\r\nexport default playfair;\r\n","D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\index.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\scitula.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Playfair\\Playfair.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\containers\\PlayfairBase.js",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Atbash\\Atbash.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Switch\\Switch.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\components\\Gronsfeld\\Gronsfeld.jsx",[],"D:\\Рабочий стол\\React\\Cryptography\\src\\utils\\atbash.js",[],{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"173","replacedBy":"177"},{"ruleId":"175","replacedBy":"178"},{"ruleId":"173","replacedBy":"179"},{"ruleId":"175","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":18},{"ruleId":"181","severity":1,"message":"185","line":3,"column":7,"nodeType":"183","messageId":"184","endLine":3,"endColumn":13},{"ruleId":"181","severity":1,"message":"186","line":4,"column":7,"nodeType":"183","messageId":"184","endLine":4,"endColumn":13},{"ruleId":"187","severity":1,"message":"188","line":88,"column":31,"nodeType":"189","messageId":"190","endLine":93,"endColumn":10},{"ruleId":"191","severity":1,"message":"192","line":104,"column":33,"nodeType":"189","messageId":"193","endLine":104,"endColumn":35},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],["194"],["195"],["194"],["195"],"no-unused-vars","'validate' is defined but never used.","Identifier","unusedVar","'arr_RU' is assigned a value but never used.","'arr_EN' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'specialSymbol'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation"]